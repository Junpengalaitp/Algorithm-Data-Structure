{
    "root": {
        "data": {
            "id": "c94lglnk4bk0",
            "created": 1612832656166,
            "text": "Dynamic Programming"
        },
        "children": [
            {
                "data": {
                    "id": "c94lh7ucqa00",
                    "created": 1612832704466,
                    "text": "Reverse Thinking"
                },
                "children": [
                    {
                        "data": {
                            "id": "c94lhct11i80",
                            "created": 1612832715269,
                            "text": "Leetcode 5. Longest Palindromic Substring"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "c94lhkpaig00",
                                    "created": 1612832732458,
                                    "text": "use a 2D matrix as dp table, init with all boolean true values, and process it from right bottom to top left"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c94li3otu140",
                                    "created": 1612832773789,
                                    "text": "each row and col index represents substring from row to col + 1"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c94limrhe5s0",
                                    "created": 1612832815308,
                                    "text": "if the char at row and the char at col is not equal, then it's cannot be a palindrome, put false in matrix"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c94ljt5cb2w0",
                                    "created": 1612832907571,
                                    "text": "if they are equal, it has the possibility to be a palindrome, we further check the substring from row + 1, col - 1 is palindrome or not, which is already exist in the dp table"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c94lkwt3ov40",
                                    "created": 1612832993902,
                                    "text": "if the current substring is a palindrome and the length is longer than the current longest, update the current longest with the current substring"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "c95ftn2ugu80",
                            "created": 1612918311298,
                            "text": "Leetcode 120. Triangle"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "c95gbq5t0000",
                                    "created": 1612919728562,
                                    "text": "recursive"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "c95gbsznsqw0",
                                            "created": 1612919734721,
                                            "text": "base case: if level equals trianle size, return 0"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c95gchv9u600",
                                            "created": 1612919788875,
                                            "text": "recursive calling level + 1 and add min of current index and index + 1 to current value"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c95gdpzi6r40",
                                            "created": 1612919884910,
                                            "text": "use a cahe"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c95gdv4ag400",
                                            "created": 1612919896083,
                                            "text": "O(n) time and space, n = total values"
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "data": {
                                    "id": "c95gdtistio0",
                                    "created": 1612919892607,
                                    "text": "iterative"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "c95gecc2cdc0",
                                            "created": 1612919933558,
                                            "text": "start from level 1(the second level)"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c95gejur2eg0",
                                            "created": 1612919949926,
                                            "text": "update values of each level are the value plus min of upper level col - 1 and col (need to deal with index out of bound) "
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c95gfdgaoew0",
                                            "created": 1612920014355,
                                            "text": "the min of the last row is the answer"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c95gfkduzyw0",
                                            "created": 1612920029445,
                                            "text": "can reuse the triangle itself, no extra space"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c95gfvni7xc0",
                                            "created": 1612920053973,
                                            "text": "O(n) time, n = total nodes"
                                        },
                                        "children": []
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "c96anve5exs0",
                            "created": 1613005313618,
                            "text": "subarray"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "c96anz8jph40",
                                    "created": 1613005321986,
                                    "text": "Leetcode 53. Maximum Subarray",
                                    "expandState": "expand"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "c96ao5md0hc0",
                                            "created": 1613005335882,
                                            "text": "init max value with the first value in the array ",
                                            "expandState": "expand"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c96ap7vhfs80",
                                            "created": 1613005419152,
                                            "text": "for each value from index 1 to the end, the max sum ending at current value is max of current value and current value plus max value of index - 1"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c96aq2shv0o0",
                                            "created": 1613005486451,
                                            "text": "can use a variable to record previous max, so no extra space"
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "data": {
                                    "id": "c96aqmjhb600",
                                    "created": 1613005529442,
                                    "text": "Leetcode 152. Maximum Product Subarray"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "c96ar1tftjs0",
                                            "created": 1613005562696,
                                            "text": "init max value, max positive product and min negative product with the first value in the array "
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c96arjtzlcg0",
                                            "created": 1613005601911,
                                            "text": "for each value from index 1 to the end, if the current value is negative, swap the max postive product and min negative product"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c96as05wi2o0",
                                            "created": 1613005637460,
                                            "text": "the max positive product is the max of itself and current value * itself"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c96ashseumo0",
                                            "created": 1613005675826,
                                            "text": "the min positive product is the min of itself and current value * itself"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c96asnyrysg0",
                                            "created": 1613005689272,
                                            "text": "the max value result is the max of itself and max positive product"
                                        },
                                        "children": []
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "c97cn9tthv40",
                            "created": 1613112468853,
                            "text": "subsequence"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "c97cncjuhqo0",
                                    "created": 1613112474780,
                                    "text": "Leetcode 300. Longest increasing subsequence"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "c97cnnbowg00",
                                            "created": 1613112498232,
                                            "text": "dp approach"
                                        },
                                        "children": [
                                            {
                                                "data": {
                                                    "id": "c97cnuk9dt40",
                                                    "created": 1613112513987,
                                                    "text": "init a dp table(1D array) with the size of the array and with values 1"
                                                },
                                                "children": []
                                            },
                                            {
                                                "data": {
                                                    "id": "c97coh70fcg0",
                                                    "created": 1613112563252,
                                                    "text": "for each element in array[1:], seach all element before it, if the num before is less than it, the dp[i] = max(dp[i], dp[j] + 1)"
                                                },
                                                "children": []
                                            },
                                            {
                                                "data": {
                                                    "id": "c97cq1ptg4g0",
                                                    "created": 1613112686289,
                                                    "text": "O(n^2) time and O(n) space"
                                                },
                                                "children": []
                                            }
                                        ]
                                    },
                                    {
                                        "data": {
                                            "id": "c97cqauhl0g0",
                                            "created": 1613112706162,
                                            "text": "patience sort(binary search)"
                                        },
                                        "children": [
                                            {
                                                "data": {
                                                    "id": "c97cqkw6wwg0",
                                                    "created": 1613112728033,
                                                    "text": "init a empty list as the best increasing subsequece list"
                                                },
                                                "children": []
                                            },
                                            {
                                                "data": {
                                                    "id": "c97crg9nwqo0",
                                                    "created": 1613112796328,
                                                    "text": "for each num in the array, if the num is larger than the last element in the list(or the list is empty), add it to the tail of the list"
                                                },
                                                "children": []
                                            },
                                            {
                                                "data": {
                                                    "id": "c97csdyko2g0",
                                                    "created": 1613112869668,
                                                    "text": "else use binary search to replace an element in the list"
                                                },
                                                "children": []
                                            },
                                            {
                                                "data": {
                                                    "id": "c97csz6qf8g0",
                                                    "created": 1613112915874,
                                                    "text": "the result is the list size"
                                                },
                                                "children": []
                                            },
                                            {
                                                "data": {
                                                    "id": "c97ct4kz55k0",
                                                    "created": 1613112927619,
                                                    "text": "O(nlogn) time and O(n) space"
                                                },
                                                "children": []
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ]
    },
    "template": "right",
    "theme": "classic",
    "version": "1.4.43"
}