{
    "root": {
        "data": {
            "id": "c8kze1sfgbk0",
            "created": 1610840752601,
            "text": "Graph"
        },
        "children": [
            {
                "data": {
                    "id": "c8kze99ai5c0",
                    "created": 1610840768859,
                    "text": "Topological sort"
                },
                "children": [
                    {
                        "data": {
                            "id": "c8kzfcrctw80",
                            "created": 1610840854845,
                            "text": "Leetcode 207. Course Schedule "
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "c8kzmu6k5u80",
                                    "created": 1610841441319,
                                    "text": "Build the graph use a map, use a set to record visited state"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c8kznpbglp40",
                                    "created": 1610841509096,
                                    "text": "Backtracking + DFS, visit every course in graph, if the node is visited, it means the graph contains a cycle"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "c8l033nb9yo0",
                            "created": 1610842715750,
                            "text": "Leetcode 210. Course Schedule II"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "c8l038maf5c0",
                                    "created": 1610842726572,
                                    "text": "use node indegree"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c8l03lw8kv40",
                                    "created": 1610842755471,
                                    "text": "use bfs, start with degree 0 nodes"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c8l03r7e69k0",
                                    "created": 1610842767030,
                                    "text": "for each degree 0 nodes, remove it from queue and it edges(all it children degree minus 1)"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c8l05iqhheo0",
                                    "created": 1610842905322,
                                    "text": "if all the nodes are visited, there is a path"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "c8l0r3c903s0",
                            "created": 1610844595821,
                            "text": "Leetcode 1462. Course Schedule IV"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "c8l0r6b6qnc0",
                                    "created": 1610844602287,
                                    "text": "for every query pairs, do a DFS/BFS"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c8l0rfcoqhs0",
                                    "created": 1610844621969,
                                    "text": "use a cache"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "c8qyxc1db9k0",
                            "created": 1611448802459,
                            "text": "Leetcode  802. Find Eventual Safe States"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "c8qyxd6fiqg0",
                                    "created": 1611448804942,
                                    "text": "reverse the egdes, and do a topological sort on reversed graph"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "c8qyzkeb4dc0",
                            "created": 1611448977384,
                            "text": "Leetcode 1136. Parallel Courses"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "c8qz0eevx2w0",
                                    "created": 1611449042722,
                                    "text": "do a topological sort on course adjacent map, level by level, the level number is the answer"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "c8qz1ut01yo0",
                            "created": 1611449156769,
                            "text": "Leetcode 1245. Tree Diameter"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "c8qz25lkqn40",
                                    "created": 1611449180264,
                                    "text": "it's an undirect graph, but it can be solved by the idea of topological sort"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c8qz2piol880",
                                    "created": 1611449223625,
                                    "text": "use BFS, start with indegree 1 nodes(leaf nodes, because it's a UDAG),"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c8qz3jsdz2w0",
                                    "created": 1611449289515,
                                    "text": "search level by level, util 1 or 2 nodes remains, each time add indegree 1 nodes to queue"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c8qz53cgfd40",
                                    "created": 1611449410452,
                                    "text": "the search pattern is from both ends to the middle, if one node remains, the answer is level number * 2, if two nodes remains the answer is level number * 2 + 1(the edge between the remaining two nodes)"
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            }
        ]
    },
    "template": "right",
    "theme": "classic",
    "version": "1.4.43"
}