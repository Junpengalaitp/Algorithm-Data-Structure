{
    "root": {
        "data": {
            "id": "c7vy8r2qr7s0",
            "created": 1608298517433,
            "text": "Stack and Queue"
        },
        "children": [
            {
                "data": {
                    "id": "c7won619xaw0",
                    "created": 1608372995952,
                    "text": "Stack"
                },
                "children": [
                    {
                        "data": {
                            "id": "c7won74gwo00",
                            "created": 1608372998322,
                            "text": "LC. 394 Decode String"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "c7wonqt72vc0",
                                    "created": 1608373041176,
                                    "text": "flat the nested brackets: 2[a2[bc]] -> 2[abcbc]"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c7woog6v3kw0",
                                    "created": 1608373096422,
                                    "text": "iterative"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "c7wooruvuco0",
                                            "created": 1608373121819,
                                            "text": "if current index is a number, parse the number and push it to stack(could be a large number)"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c7wopeohufc0",
                                            "created": 1608373171499,
                                            "text": "if the current index is a string or left bracket, push it to the stack"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c7wopqke0lc0",
                                            "created": 1608373197372,
                                            "text": "if the current index is a right bracket, start poping the stack until the left bracket are found, reverse the chars and make them a string"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c7woqwymfmo0",
                                            "created": 1608373289657,
                                            "text": "find the top number on stack, multiply the string by it"
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "data": {
                                    "id": "c7x76jxw9yo0",
                                    "created": 1608425295120,
                                    "text": "recursive"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "c7x76lupkco0",
                                            "created": 1608425299281,
                                            "text": "if current idx is a digit"
                                        },
                                        "children": [
                                            {
                                                "data": {
                                                    "id": "c7x770zds7c0",
                                                    "created": 1608425332215,
                                                    "text": "parse the digit until we meet the left bracket"
                                                },
                                                "children": []
                                            },
                                            {
                                                "data": {
                                                    "id": "c7x778n1d340",
                                                    "created": 1608425348883,
                                                    "text": "recusively parse the substring in the bracket until we meet right bracket"
                                                },
                                                "children": []
                                            },
                                            {
                                                "data": {
                                                    "id": "c7x77v1xxio0",
                                                    "created": 1608425397673,
                                                    "text": "recursively call on the rest of the string"
                                                },
                                                "children": []
                                            }
                                        ]
                                    },
                                    {
                                        "data": {
                                            "id": "c7x7872jdhs0",
                                            "created": 1608425423831,
                                            "text": "if current idx is a letter"
                                        },
                                        "children": [
                                            {
                                                "data": {
                                                    "id": "c7x78bkrx740",
                                                    "created": 1608425433641,
                                                    "text": "parse the letter"
                                                },
                                                "children": []
                                            },
                                            {
                                                "data": {
                                                    "id": "c7x78f6oy540",
                                                    "created": 1608425441496,
                                                    "text": "recursively call on the rest of the string"
                                                },
                                                "children": []
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "c7xh8r9vjug0",
                            "created": 1608453678909,
                            "text": "LC 946. Validate Stack Sequences"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "c7xh8tu49ao0",
                                    "created": 1608453684487,
                                    "text": "use a stack, push the pushed value to the stack"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c7xh99h5rrc0",
                                    "created": 1608453718532,
                                    "text": "while encounter pushed value equals to poped value, we need to pop it"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c7xha5x4sfs0",
                                    "created": 1608453789155,
                                    "text": "finally we check the stack is empty or not"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "c7y0o62r0bc0",
                            "created": 1608508487681,
                            "text": "Monoston Stack"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "c7y0ohoksio0",
                                    "created": 1608508512945,
                                    "text": "a stack with all it elements in sorted order"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c7y0owf5v9c0",
                                    "created": 1608508545028,
                                    "text": "good for problems which need to find the next greater/smaller element"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c7y0pizcqd40",
                                    "created": 1608508594138,
                                    "text": "LC 496. Next Greater Element I"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "c7y0pple25s0",
                                            "created": 1608508608531,
                                            "text": "use monotone stack for finding next greater element of the array, put the result in the map"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c7y0q8o75mw0",
                                            "created": 1608508650060,
                                            "text": "return ans from the map"
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "data": {
                                    "id": "c7yvn1d3a8o0",
                                    "created": 1608595853465,
                                    "text": "LC. 739. Daily Temperatures"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "c7yvn4kgdy80",
                                            "created": 1608595860441,
                                            "text": "use monotone stack (decreasing), push the array idx in stack"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c7yvnjmdw1k0",
                                            "created": 1608595893209,
                                            "text": "loop the array, while current idx element is greater than the stack top idx element, pop the idx and record answer as current idx - stack top idx"
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "data": {
                                    "id": "c7zovvkq1ls0",
                                    "created": 1608678358331,
                                    "text": "LC 42"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c7zpljr6ers0",
                                    "created": 1608680370068,
                                    "text": "LC 84. Largest Rectangle in Histogram"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "c7zplr0a2740",
                                            "created": 1608680385856,
                                            "text": "for each pillar, the largest area of its height is determined by the nearest pillar that shorter than it from left and right "
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c7zpp37h82o0",
                                            "created": 1608680647505,
                                            "text": "in other words, the pillar need to find the first item that smaller than it, we can use a monotone increasing stack to do it"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c80itqnlnxc0",
                                            "created": 1608762824190,
                                            "text": "when push into the stack, pop all elements that are greater than the current element, so the stack top must be the nearest smallest element"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c80iv1iosps0",
                                            "created": 1608762926201,
                                            "text": "we can find the smallest next of both left and right in one iteration, because when we are poping items, the next smallest of the poped item must be the current item that we are pushing to the stack"
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "data": {
                                    "id": "c7zow1vt6y80",
                                    "created": 1608678372062,
                                    "text": "LC 901"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c7zow3j510g0",
                                    "created": 1608678375649,
                                    "text": "LC 402.Remove K Digits"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "c82jgf0q9540",
                                            "created": 1608967721151,
                                            "text": "use a monotone increasing stack(can pop k items)"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c82jgmzgaqw0",
                                            "created": 1608967738488,
                                            "text": "if k > 0, remove k elements from the end"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c82jhq97s600",
                                            "created": 1608967823973,
                                            "text": "return the stack elements as string"
                                        },
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "data": {
                                    "id": "c7zow6s1h7k0",
                                    "created": 1608678382718,
                                    "text": "LC 581. Shortest Unsorted Continuous Subarray"
                                },
                                "children": [
                                    {
                                        "data": {
                                            "id": "c82kafracj40",
                                            "created": 1608970073682,
                                            "text": "use monotone stack find the left and right"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c82kaom199c0",
                                            "created": 1608970092955,
                                            "text": "finding left: increasing stack"
                                        },
                                        "children": []
                                    },
                                    {
                                        "data": {
                                            "id": "c82kawqxtjs0",
                                            "created": 1608970110666,
                                            "text": "finding right: reverse loop, decreasing stack"
                                        },
                                        "children": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "c7y0o3gyxps0",
                    "created": 1608508482010,
                    "text": "Queue"
                },
                "children": []
            }
        ]
    },
    "template": "right",
    "theme": "classic",
    "version": "1.4.43"
}